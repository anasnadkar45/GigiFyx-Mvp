// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(UNASSIGNED)
  clinic        Clinic?   @relation("UserClinic")
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Patient       Patient?
}

enum Role {
  UNASSIGNED
  PATIENT
  CLINIC_OWNER
  ADMIN
}

model Patient {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id])
  age          Int?
  name         String
  icOrPassport String  @unique
  phone        String
  email        String?
  address      String?
  notes        String?
  status       String?
  gender       Gender?
  bloodGroup   String?
  allergies    String? // comma-separated list or consider a separate model if needed
  medicalNote  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Clinic {
  id          String       @id @default(cuid())
  name        String
  address     String
  phone       String
  description String
  image       String?
  documentUrl String
  status      ClinicStatus @default(PENDING)

  ownerId String @unique
  owner   User   @relation("UserClinic", fields: [ownerId], references: [id])

  doctors   Doctor[]
  slots     Slot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClinicStatus {
  PENDING
  APPROVED
  REJECTED
}

model Doctor {
  id             String   @id @default(cuid())
  name           String
  specialization String
  image          String?
  clinicId       String
  clinic         Clinic   @relation(fields: [clinicId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Slot {
  id        String   @id @default(cuid())
  clinicId  String
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  booking   Booking?
  createdAt DateTime @default(now())
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  slotId    String        @unique
  user      User          @relation(fields: [userId], references: [id])
  slot      Slot          @relation(fields: [slotId], references: [id])
  status    BookingStatus @default(BOOKED)
  createdAt DateTime      @default(now())
}

enum BookingStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
