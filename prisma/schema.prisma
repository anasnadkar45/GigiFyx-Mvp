// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(UNASSIGNED)
  clinic        Clinic?       @relation("UserClinic")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Patient       Patient?
  Appointments  Appointment[]

  @@index([email])
  @@index([role])
}

enum Role {
  UNASSIGNED
  PATIENT
  CLINIC_OWNER
  ADMIN
}

model Patient {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  age          Int?
  name         String
  icOrPassport String  @unique
  phone        String
  email        String?
  address      String?
  notes        String?
  status       PatientStatus @default(ACTIVE)
  gender       Gender?
  bloodGroup   String?
  allergies    String? // comma-separated list or consider a separate model if needed
  medicalNote  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([icOrPassport])
  @@index([phone])
  @@index([status])
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Clinic {
  id          String       @id @default(cuid())
  name        String
  address     String
  phone       String
  description String
  image       String?
  documentUrl String
  status      ClinicStatus @default(PENDING)
  
  // Contact and operational info
  email       String?
  website     String?
  
  // Location data for search/filtering
  city        String?
  state       String?
  zipCode     String?
  latitude    Float?
  longitude   Float?

  ownerId String @unique
  owner   User   @relation("UserClinic", fields: [ownerId], references: [id], onDelete: Cascade)

  doctors      Doctor[]
  services     Service[]
  workingHours ClinicWorkingHours[]
  appointments Appointment[]
  
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@index([status])
  @@index([city])
  @@index([name])
}

enum ClinicStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Doctor {
  id             String   @id @default(cuid())
  name           String
  specialization String
  image          String?
  bio            String?
  experience     Int?     // years of experience
  qualifications String?  // comma-separated or JSON
  
  clinicId       String
  clinic         Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([clinicId])
  @@index([specialization])
}

model ClinicWorkingHours {
  id       String @id @default(cuid())
  clinicId String
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  day       DayOfWeek
  openTime  String    // Format: "HH:mm"
  closeTime String    // Format: "HH:mm"
  duration  Int       // Appointment duration in minutes
  
  // Break times (optional)
  breakStartTime String? // Format: "HH:mm"
  breakEndTime   String? // Format: "HH:mm"
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([clinicId, day]) // ensures one entry per day per clinic
  @@index([clinicId])
}

model Appointment {
  id                 String        @id @default(cuid())
  
  // Patient and clinic info
  userId             String
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinicId           String
  clinic             Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  // Service info
  serviceId          String
  service            Service       @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  
  // Appointment timing
  startTime          DateTime      // Start time of appointment
  endTime            DateTime      // End time of appointment
  
  // Appointment details
  status             BookingStatus @default(BOOKED)
  patientDescription String?       // Patient's description of symptoms/concerns
  clinicNotes        String?       // Clinic's internal notes
  
  // Cancellation info
  cancellationReason String?
  cancelledAt        DateTime?
  cancelledBy        String?       // User ID who cancelled
  
  // Payment info (if applicable)
  totalAmount        Float?
  paymentStatus      PaymentStatus @default(PENDING)
  paymentMethod      String?
  
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([userId])
  @@index([clinicId])
  @@index([serviceId])
  @@index([startTime])
  @@index([status])
  @@index([paymentStatus])
  // Prevent overlapping appointments for the same clinic
  @@unique([clinicId, startTime])
}

enum BookingStatus {
  BOOKED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float?
  category    String
  
  // Service details
  duration    Int?          // Default duration in minutes
  preparation String?       // Preparation instructions for patients
  
  // Status and availability
  isActive    ServiceStatus @default(ACTIVE)
  
  // Clinic relationship (now required)
  clinicId    String
  clinic      Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  appointments Appointment[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([clinicId])
  @@index([category])
  @@index([isActive])
  @@unique([clinicId, name]) // Prevent duplicate service names within a clinic
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

// Notification system for appointment reminders
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  
  // Related entities
  appointmentId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isRead])
  @@index([type])
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_RESCHEDULED
  CLINIC_UPDATE
  SYSTEM_NOTIFICATION
}

// Clinic reviews and ratings
model Review {
  id        String @id @default(cuid())
  userId    String
  clinicId  String
  
  rating    Int    // 1-5 stars
  comment   String?
  
  // Moderation
  isApproved Boolean @default(false)
  moderatedBy String?
  moderatedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clinicId])
  @@index([rating])
  @@index([isApproved])
  @@unique([userId, clinicId]) // One review per user per clinic
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}