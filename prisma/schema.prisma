// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(UNASSIGNED)
  clinic        Clinic?       @relation("UserClinic")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Patient       Patient?
  Appointment   Appointment[]
}

enum Role {
  UNASSIGNED
  PATIENT
  CLINIC_OWNER
  ADMIN
}

model Patient {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id])
  age          Int?
  name         String
  icOrPassport String  @unique
  phone        String
  email        String?
  address      String?
  notes        String?
  status       String?
  gender       Gender?
  bloodGroup   String?
  allergies    String? // comma-separated list or consider a separate model if needed
  medicalNote  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Clinic {
  id          String       @id @default(cuid())
  name        String
  address     String
  phone       String
  description String
  image       String?
  documentUrl String
  status      ClinicStatus @default(PENDING)

  ownerId String @unique
  owner   User   @relation("UserClinic", fields: [ownerId], references: [id])

  doctors      Doctor[]
  slots        Slot[]
  services     Service[]
  workingHours ClinicWorkingHours[] // NEW RELATION
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

enum ClinicStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Doctor {
  id             String   @id @default(cuid())
  name           String
  specialization String
  image          String?
  clinicId       String
  clinic         Clinic   @relation(fields: [clinicId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ClinicWorkingHours {
  id       String @id @default(cuid())
  clinicId String
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  day       DayOfWeek
  openTime  DateTime
  closeTime DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clinicId, day]) // ensures one entry per day per clinic
}

model Slot {
  id        String     @id @default(cuid())
  clinicId  String
  clinic    Clinic     @relation(fields: [clinicId], references: [id])
  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)

  createdAt   DateTime     @default(now())
  Appointment Appointment?
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id                 String        @id @default(cuid())
  userId             String
  slotId             String        @unique
  serviceId          String
  user               User          @relation(fields: [userId], references: [id])
  slot               Slot          @relation(fields: [slotId], references: [id])
  status             BookingStatus @default(BOOKED)
  service            Service       @relation(fields: [serviceId], references: [id])
  startTime          DateTime // Start time of appointment
  endTime            DateTime // End time of appointment
  patientDescription String?
  createdAt          DateTime      @default(now())
}

enum BookingStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

model Service {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  price       Float?
  category    String
  isActive    ServiceStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Clinic      Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId    String?
  Appointment Appointment[]
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
